#### STARTING WITH GIT REPO ####
 /--------------------------------------------------------------------------------\
| SCENARIO ONE:                                                                   | 
|    - there is a project on local drive (in dir: myProject)                      |
|    - there is an active account on GitHub                                        |
|    - REMEMBER ABOUT BRANCHING. HERE NOT INCLUDED                                |
 \--------------------------------------------------------------------------------/
1) go to the myProject dir
    cd myProject

2) start tracking the folder by git
    git init
                                comment: the hidden folder ".git" will be created in this dir
                                comment: to stop tracking the folder by git just delete ".git" dir by writing: rm  -rf .git

3) do changes to any files in myProject dir

4) to check the situation, changes etc 
    git status

5) to add files to the stage area there are few options
    a) git add .                comment: will add all changes or git add -A 
    b) git add <file>           comment: will add only specific file
    c) git add *.py             comment: will add all files with extension ".py"

6) to remove files from stage area
    a) git rm --cached <file>
    or
    b) git reset <file>
    or
    c) git reset                comment: this will remove all files from staging area 

                                comment: if you want permanently ignore some files or directiories do as follows
                                    *) create a .gitignore file in dir "myProject"
                                            touch .gitignore
                                    *) type in, line by line, the files or directiories you want to be ignored
                                            examples:   log.txt
                                                        *.txt
                                                        /statics
                                                        .DS_Store

7) when needed fileas are in stage area do the commit
    git commit -m "here write the description to the commit"

8) create remote repo and connect it to the actual local repo
git remote add origin <remote github account url>
git remote -v                    comment: checking the repos 


/--------------------------------------------------------------------------------\
| SCENARIO TWO:                                                                   | 
|    - there is a project on remote GitHub  repository                            |
|    - there is an active account on GitHub                                       |
 \--------------------------------------------------------------------------------/
1) go to GitHub remote repository and copy it's url

2) in terminal write
    git clone <url> <where to clone it means you can write: git clone <url> .     comment : the dot means into current dir 

3) checking the binding local vs remote
    git remote -v
    git branch -a





/----------------------------------------\
|#### PUSHING CHANGES ####               |
\----------------------------------------/
git diff                             comment : show me the changes made to the code
git status
git add -A or git add .
git commit -m "<comment here>" 

git pull origin developer           comment: dont touch master
git push origin developer           comment: dont touch master




/----------------------------------------\
|#### COMMON FORKFLOW ####               |
\----------------------------------------/
1) create <new branch> to work on the new feature 
git branch <new branch>
git checkout <new branch>
or just......
git checkout -b <new branch>

2) commit changes and push them to remote <new branch>
git branch
git status
git add -A
git commit -m "new function"
git push -u origin <destination new branch>
git branch -a

3) merge a branch
git checkout developer 
git pull origin developer                to have any changes sent by others
git branch --merged                      branches merged so far 
git merge <new branch>                   merging localy
git push origin developer               pushing to remote

4) deleting a branch
git branch --merged                     to double check if all was merged 
git branch -d <new branch>              will delete branch locally
git branch -a                           check branches
git push origin --delete <new branch>   will delete the brnch from remote 
git branch -a                           checking the recult of our action



/-----------------------------------------------\
|#### FIXING COMMON MISTAKES ####               |
\-----------------------------------------------/
COMING BACK TO THE SITUATION FROM THE LAST COMMIT
making changes to the file <file>
git diff
git checkout                            comes back to the last commit, earease changes
git status


CORRECTING CHANGES LOCALLY BEFORE THEIR WERE PUSHED TO REMOTE - EXAMPLE: WRONG COMMENT IN COMMIT
making changes to the file <file>
git status
git add -A
git status 
git commit -m "wrong comment here which we will correct"
git log                                 we see the wrong comment
git commit --ammend -m "correct comment here"       
git log                                 the hash of the commit will change and the comment will change aswell we see



CORRECTING CHANGES LOCALLY BEFORE THEIR WERE PUSHED TO REMOTE - EXAMPLE: MISSING FILE IN COMMIT AND ADDING THIS FILE TO THE LAST COMMIT
forgeting to add a file to commit...ups....lets fix it....we want to add the file to the last commit 
git add <missing file>
git commit --ammend                     comment: will bring interactive editor. in it do: " esc:wq "
git log --stat


CORRECTING CHANGES LOCALLY BEFORE THEIR WERE PUSHED TO REMOTE - EXAMPLE: WE WERE MAKING COMMITS TO THE WRONG BRANCH (like: MASTER) . 
HOW DO WE MOVE COMMITS FROM MASTER TO FEATURE BRANCH?   GIT CHERRY PICK :)
first go to the wrong branch (like: master , or developer)
git log                              we want to grab a hash number of the commit 6-7 first numbers should be enought
git checkout <destination feature branch>
git log
git cherry-pick <number hash>
git log                    
it will bring the commit from master / developer into new feature branch. but it still exists in the wrong branch because cherry-pick does not delete it 
..... so ..... in order to delete the wrong commit on master, we do:
git checkout master 
git log 
copy the hash number of the commit we wont to go back to...and then...
git reset --soft <hush number> 
git log
git status
                                    comment: soft will set us back to the commit we specified but wi will keep files in commit area

or
git reset <hush number>              this is mixed reset which is default so we do not need to write "mixed"
changes will be is stage area

or
git reset --hard <hush number>
deletes all changes to the files, where will be no files in stage nor commit area
git clean -df    gets rid of any untracked directories (d)  and files (f)


CORRECTING GIT RESET --HARD
if you used git reset --hard you still can go back to some changes deleted !!! cool no? :)
git reflog                          comment: shows commits and infos
git checkout <hash number which I want from reflog>
git log
git branch backup
git branch 
git checkout master
git branch 
git checkout backup 
git log                             comment: we have changes which we though we have lost :)



CORRECTING CHANGES AFTER THEIR WERE PUSHED TO REMOTE
if need to undo some commits but other people already use it....lets use: git revert
it will create new commits on the top of previous
beeing on the backup branch
git revert <hash number>
come up with message....:wq
git log 
git diff <hash> <another hash>              to compare specific commits
git log 



GIT STASH COMMAND - USEFULL COMMAND. STASHES CHANGES AND ALLOWS US TO DO SOME STUFF
git checkout -b <feature branch>
changing some files 
git diff 
git stash save "worked on end function"
git diff
git stash list
git stash apply stash@{<number>}
git stash list 
git stash pop                             will grab first stash, apply and drop it
git diff


git stash save "calc functions"
git stash list 
edit the file 
git diff 
git stash save "Added square function" 
git stash list 
git stash pop 

git stash drop stash@{<number>}
git shash list 
git stash drop clear                     deletes all stashes

diff merge apply


USEFULL FEATURES:

git log                 shows all commits and infos
git clean -df           gets rid of any untracked directories (d)  and files (f)

clear                   to clear terminal window
cd 
cd .
cd ..
ls
ls -la 

git remote add origin <github address>
git remote -v
git add -A    (shortage of --all)             stage all changes in working dir
git reset                                     to unstage all
git add -A <dir name>                         stage all changes in specified dir
git reset


git add -u    (shortage of --update)          all deleted and modified , but non of untracked files
git add -u <dir name>
git reset


git add .                                    (current dir) it is differetn then default git -A but same as git add -A . 

